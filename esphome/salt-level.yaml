substitutions:
  device_description: "Salt level detection with M5Stack AtomS3 lite and TOF vl53l0x sensor"
  timezone: "Europe/Amsterdam"

## choose between languages. NL or EN are available.
packages:
  remote_package:
    url: https://github.com/fonske/Salt-level-tof-atoms3
    ref: main
    refresh: 0s
    files: [
            esphome/labels/.salt-level-labels-nl.yaml,  
            #esphome/labels/.salt-level-labels-en.yaml, 
           ]
## choices are: esphome/labels/.salt-level-labels-en.yaml, or esphome/labels/.salt-level-labels-nl.yaml,

## for developing/testing, uncomment local includes and comment out remote_package part.
#packages:
#  substitutions: !include labels/.salt-level-labels-nl.yaml
#  substitutions: !include labels/.salt-level-labels-en.yaml

external_components:
  - source: github://pr#4444
    components: [async_tcp, web_server_base]
    refresh: always

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  on_boot:
    priority: 200
    then:
      - script.execute: on_boot

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  #fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${name}
    password: "configesp"
    ap_timeout: 30s
 
captive_portal:

# Sync time with sntp server
time:
  - platform: homeassistant
    id: sntp_time
    timezone: ${timezone}

# Enable logging
logger:
  baud_rate: 0
  logs:
    esp32.preferences: DEBUG
    sensor: DEBUG
    text_sensor: DEBUG
    switch: DEBUG
    button: DEBUG
    number: DEBUG
    component: ERROR

# Enable Home Assistant API
api:
  reboot_timeout: 0s
  services:
    - service: set_last_distance
      variables:
        last_distance_value: int
      then:
        - globals.set:
            id: last_distance
            value: !lambda 'return last_distance_value;' 
 
#update for esphome 2024.6.0
# OTA:
ota:
  platform: esphome
  
web_server:
  port: 80

i2c:
  - id: bus_a
    sda: GPIO2
    scl: GPIO1

# Define a global variable for last regeneration time
globals:
  - id: fill_last
    type: std::string
    restore_value: yes
    initial_value: '"${never}"'

  - id: last_distance
    type: float
    restore_value: yes
    initial_value: '0.00'

script:
###  On reboot or powerloss of the esp, set the fill last date and time
  - id: on_boot
    then:
      - delay: 5s
      - text_sensor.template.publish:
          id: salt_fill_last
          state: !lambda |-
            return id(fill_last);
      - switch.turn_on: salt_fill_switch
      - light.turn_on: led
      - sensor.template.publish:
          id: salt_distance
          state: !lambda |-
            return id(distance_cm).state;
  - id: recalculate
    then:
      - sensor.template.publish:
          id: salt_height
          state: !lambda |-
            return id(salt_height_max).state-id(last_distance_cm).state;
      - sensor.template.publish:
          id: salt_procent
          state: !lambda |-
            const float max_distance = id(salt_height_max).state; // heigt in cm to lowest level
            const float min_distance = id(salt_height_min).state; // height in cm to highest level
            return int((1/((max_distance - min_distance)/id(salt_height).state))*100);
      - text_sensor.template.publish:
          id: salt_fill_salt
          state: !lambda |-
            if (id(salt_height).state < id(salt_height_fill).state) {
              return {"${salt_fill_yes}"};
            } else {
              return {"${salt_fill_no}"};
             }

sensor:
  - platform: template
    id: last_distance_cm
    name: ${salt_distance}
    icon: mdi:ruler
    unit_of_measurement: cm
    accuracy_decimals: 1
    update_interval: never

  - platform: vl53l0x
    id: distance_cm
    name: ${salt_distance} TOF
    address: 0x29
    update_interval: 10s
    long_range: false
    internal: false
    icon: mdi:ruler
    filters:
      - lambda: |-
          if (isnan(x)) {
            return 0;
          } else {
            return x;
          }
      - lambda: return x*100;
      - clamp:
          min_value: 0.0
          max_value: 400.0
    on_value:
      then:
        - if:
            condition:
              switch.is_on: salt_fill_switch
            then:          
            - sensor.template.publish:
                id: salt_distance
                state: !lambda |-
                  return id(distance_cm).state;

# ultrasonic distance sensor.
  - platform: template
    name: salt_distance #${salt_distance}
    id:  salt_distance
    unit_of_measurement: "cm"
    accuracy_decimals: 1
    icon: "mdi:arrow-expand-vertical" 
    update_interval: never
    internal: true
    on_value:
       then:
        - if:
            condition:
              switch.is_on: salt_fill_switch
            then:
            - globals.set:
                id: last_distance
                value: !lambda |-
                  const float old_distance = id(last_distance); 
                  const float new_distance = id(distance_cm).state;
                  if (new_distance > old_distance) {
                    return id(salt_distance).state;
                  } else {
                    return old_distance;
                  }
            - sensor.template.publish:
                id: last_distance_cm
                state: !lambda |-
                  return id(last_distance);
            - script.execute: recalculate
      
  # ultrasonic distance sensor calculate tank_percentage
  - platform: template
    id: salt_procent
    name: ${salt_procent}
    unit_of_measurement: "%"
    accuracy_decimals: 0
    icon: "mdi:percent-box-outline" 
    update_interval: 600s
    filters:
    - lambda: |-
        if (x >= 100) return 100.0;
        else if (x <= 0.0) return 0.0;
        else return x;
    on_value_range:  
      - above: 0.0
        below: 25.0
        then:
          - light.turn_on:
              id: led
              brightness: !lambda |-
                // output value must be in range 0 - 1.0
                return id(led_brightness).state / 100.0;
              red: 100%
              green: 0%
              blue: 0%

      - above: 26.0
        below: 75.0
        then:
          - light.turn_on:
              id: led
              brightness: !lambda |-
                // output value must be in range 0 - 1.0
                return id(led_brightness).state / 100.0;
              red: 0%
              green: 0%
              blue: 100%          

      - above: 76.0
        below: 100.0
        then:
          - light.turn_on:
              id: led
              brightness: !lambda |-
                // output value must be in range 0 - 1.0
                return id(led_brightness).state / 100.0;
              red: 0%
              green: 100%
              blue: 0%

  # Saltlevel animation picture on dashboard  
  - platform: copy
    source_id: salt_procent
    id: salt_level_animation
    name: ${salt_level_animation}
    filters:
    - lambda: |-
        if (x >= 80) return 100;
        else if (x >= 65 && x <= 79) return 80;
        else if (x >= 40 && x <= 64) return 60;   
        else if (x >= 20 && x <= 39) return 40;
        else if (x >= 10 && x <= 19) return 20;
        else if (x >= 5 && x <= 9) return 10;
        else if (x <= 4) return 0;
        else return x;

          
  # ultrasonic distance sensor calculate salt level from bottom
  - platform: template
    id: salt_height
    name: ${salt_height}
    unit_of_measurement: "cm"
    accuracy_decimals: 1
    icon: "mdi:hydraulic-oil-level" 
    update_interval: 600s
    filters:
    - lambda: |-
        if (x >= 100) return 100.0;
        else if (x <= 0.0) return 0.0;
        else return x;

# Diagnostics wifi and uptime      
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    id: salt_wifi_signal_db
    name: ${salt_wifi_signal_db}
    update_interval: 60s
    entity_category: diagnostic
    internal: True

  - platform: copy # Reports the WiFi signal strength in %
    source_id: salt_wifi_signal_db
    id: salt_wifi_signal_db_percent
    name: ${salt_wifi_signal_db_percent}
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic

  - platform: uptime
    id: salt_uptime
    name: ${salt_uptime}
    unit_of_measurement: ${days}
    update_interval: 3600s
    accuracy_decimals: 1
    filters:
      - multiply: 0.000011574

# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    id: salt_version
    name: ${salt_version}
    hide_timestamp: true
    icon: mdi:new-box
    entity_category: diagnostic

  # Expose WiFi information as sensor.
  - platform: wifi_info
    ip_address:
      name: ${salt_ip}
      icon: mdi:ip-network
  
  # Textsensor "Fill Salt" yes or no.
  - platform: template
    name: ${salt_fill_salt}
    id: salt_fill_salt
    icon: mdi:basket-fill
    update_interval: never

light:
#G35=RGB WS2812C-2020
  - platform: esp32_rmt_led_strip
    name: Led
    id: led
    rgb_order: GRB
    pin: 35
    num_leds: 4
#    brightness: 0.7
    # RMT 0 channels will be occupied by IR
    rmt_channel: 1
    chipset: ws2812
#    restore_mode: ALWAYS_ON
    internal: True

#G41=Button
binary_sensor:
  - platform: gpio
    id: esp_button
    pin:
      number: GPIO41
      inverted: true
      mode:
        input: true
        pullup: true
    internal: True
    filters:
      - delayed_off: 10ms
    on_multi_click:
        - timing:
             - ON for at most 2s  # led_off and measurement on hold
             - OFF for at least 0.2s
          then:
            - switch.toggle: salt_fill_switch
        - timing:
             - ON for at least 3s  # reset last_distance value and filling date/time
          then:
              - globals.set:
                  id: last_distance
                  value: '0.0'
              - text_sensor.template.publish:
                  id: salt_fill_last
                  state: !lambda |-
                    char str[32];
                    time_t currTime = id(sntp_time).now().timestamp;
                    strftime(str, sizeof(str), "%a %d %b %H:%M", localtime(&currTime));
                    id(fill_last) = str;
                    return  { str };

switch:
  - platform: template
    id: salt_fill_switch
    name: ${salt_level_measure}
    optimistic: True
#    restore_mode: RESTORE_DEFAULT_ON 
    lambda: return id(salt_fill_switch).state;
    turn_on_action:
      - light.turn_on:
          id: led
          brightness: !lambda |-
            // output value must be in range 0 - 1.0
            return id(led_brightness).state / 100.0;
    turn_off_action:
      - light.turn_off:
          id: led

## ESP restart button
button:
  - platform: restart
    id: restart_button
    name: ESP restart

# imput numbers as boxes for setting the dimensions of the tank and level alarm.
number:
    ## Set minimum distance (from bottom sensor / underneath plastic cap)
  - platform: template
    id: salt_height_min
    name: ${salt_height_min}
    icon: mdi:toggle-switch-variant
    optimistic: true
    mode: slider
    step: 0.5
    entity_category: config
    min_value: 0
    max_value: 10
    initial_value: 0
    restore_value: yes
    unit_of_measurement: "cm"
    on_value:
      then:
        - script.execute: recalculate 


    ## Set maximum distance (from bottom sensor / underneath plastic cap) to water level (to measure in pipe?)
  - platform: template
    id: salt_height_max
    name: ${salt_height_max}
    icon: mdi:toggle-switch-variant-off
    optimistic: true
    mode: slider
    step: 0.5
    entity_category: config
    min_value: 0
    max_value: 100
    initial_value: 30
    restore_value: yes
    unit_of_measurement: "cm"
    on_value:
      then:
        - script.execute: recalculate

    ## Set alarm level
  - platform: template
    id: salt_height_fill
    name: ${salt_height_fill}
    icon: mdi:hydraulic-oil-temperature
    optimistic: true
    mode: slider
    step: 0.1
    entity_category: config
    min_value: 0
    max_value: 30
    initial_value: 1.5
    restore_value: yes
    unit_of_measurement: "cm"
    update_interval: 600s
    on_value:
      then:
        - text_sensor.template.publish:
            id: salt_fill_salt
            state: !lambda |-
              if (id(salt_height).state < id(salt_height_fill).state) {
                return {"${salt_fill_yes}"};
              } else {
                return {"${salt_fill_no}"};
              }

    ## Set led brightness
  - platform: template
    id: led_brightness
    name: ${led_brightness}
    icon: mdi:toggle-switch-variant
    optimistic: true
    mode: slider
    step: 10
    entity_category: config
    min_value: 0
    max_value: 100
    initial_value: 50
    restore_value: yes
    unit_of_measurement: "%"
    on_value:
      then:
        - if:
            condition:
              - light.is_on: led
            then:
            - light.turn_on:
                id: led
                brightness: !lambda |-
                  // output value must be in range 0 - 1.0
                  return id(led_brightness).state / 100.0;
